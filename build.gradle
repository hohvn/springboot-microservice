buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
        swaggerVersion = '2.9.2'
        lombokVersion = '1.18.2'
        gradleDockerVersion = '1.2'
        zipkinVersion = '2.11.1'
        zipkinGUIVersion = '2.11.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "se.transmode.gradle:gradle-docker:${project.gradleDockerVersion}"
    }
}
subprojects {
    group 'com.thaitran.microservices'
    version '1.0.0'
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'application'
    apply plugin: 'docker'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }


    ext {
        springCloudVersion = 'Finchley.SR1'
    }

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-actuator')
        runtime('org.springframework.boot:spring-boot-devtools')
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
    task buildDocker(type: Docker, dependsOn: build) {
        doFirst {
            push = false
            applicationName = project.jarName
            tagVersion = project.versionName
            dockerfile = file('src/main/docker/Dockerfile')
            // Copy the built fat jar to the Docker plugin staging directory
            copy {
                from jar
                into stageDir
            }
            // Copy the run.sh file to the Docker plugin staging directory
            copy {
                from "${project.buildDir}/resources/main/run.sh"
                into stageDir
            }
        }

    }

}
//add config client to all projects exclude config server
configure(subprojects - project(':config-server')) {
    dependencies {
        compile('org.springframework.cloud:spring-cloud-starter-config')
        compile('org.springframework.cloud:spring-cloud-starter-bus-amqp')
    }
}

//group eureka client
configure(subprojects - project(':config-server') - project('eureka-server')) {
    dependencies {
        compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    }
}


//group web mvc
configure([project(':ping'),
           project(':slave'),
           project(':command-service')]) {
    dependencies {
        compile('org.springframework.boot:spring-boot-starter-web')

    }
}

//group hystrix, zipkin
configure([project(':api-gateway'),
           project(':ping'),
           project(':slave'),
           project(':tracing'),
           project(':monitoring')]) {
    dependencies {
        compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
        compile('org.springframework.cloud:spring-cloud-netflix-hystrix-stream')
        compile('org.springframework.cloud:spring-cloud-starter-stream-rabbit')
        compile('org.springframework.cloud:spring-cloud-starter-zipkin')
        compile("org.springframework.boot:spring-boot-starter-amqp")
        compile('org.springframework.amqp:spring-rabbit')
    }
}



